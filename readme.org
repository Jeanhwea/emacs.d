#+TITLE: Jinghui's emacs configuration
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: 2018-10-22
#+TAGS: emacs configuration elisp

** Screenshot

[[file:screenshot.png]]

** Built-in package

- eshell: unix style shell
- ielm: elisp REPL
- org-mode

** Reasonable Plugins

- [[https://github.com/joaotavora/yasnippet][yasnippet]]: Aha, meet the snippet system.
- [[https://github.com/bbatsov/projectile][projectile]]: a project interaction library for Emacs.
- [[https://magit.vc/][magit]]: powerful git manager
- [[https://github.com/abo-abo/swiper][swiper]]: flexible, simple tools for minibuffer completion in Emacs
- [[https://github.com/ananthakumaran/tide][tide]]: TypeScript Interactive Development Environment for Emacs.
- [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]: Multiple cursors for Emacs.
- [[https://github.com/skeeto/elfeed][elfeed]]: an extensible web feed reader for Emacs, supporting both Atom and RSS.
- [[https://github.com/smihica/emmet-mode][emmet-mode]]: a minor mode providing support for Zen Coding by producing HTML from CSS-like selectors.
- browses-at-remote: open github url on browser
- company: auto complete words according context
- evil: vim-style text editing
- exec-path-from-shell: load PATH from system
- expand-region: expand region increases the selected region by semantic units. Just keep pressing the key until it selects what you want. [[http://emacsrocks.com/e09.html][video]]
- js-comint: let run interactive nodejs console with "M-x run-js"
- nyan-mode: change your progress display in status bar into a cute animal
- undo-tree: visualize the editing history by a tree view

** Cheatsheet

*** Function Keys
| key | binding                                    |
|-----+--------------------------------------------|
| F1  | magit-status                               |
| F2  | magit-blame                                |
| F3  | magit-log-all                              |
| F4  | bar-browse                                 |
| F5  | jh/pop-agenda-list-and-close-other-windows |
| F6  | jh/org-capture-task                        |
| F7  | elfeed                                     |
| F8  | jh/open-shrimp-shell-as-temporary-shell    |
| F9  | make-frame-command                         |
| F10 | delete-frame                               |
| F11 | jh/toggle-frame-fullscreen-mode            |
| F12 | jh/toggle-light-dark-theme                 |

*** smerge-mode
#+BEGIN_SRC elisp
  (setq smerge-command-prefix (kbd "M-0"))
#+END_SRC
| key                           | binding             |
|-------------------------------+---------------------|
| ~smerge-command-prefix~ n     | smerge-next         |
| ~smerge-command-prefix~ p     | smerge-previous     |
| ~smerge-command-prefix~ <ret> | smerge-keep-current |
| ~smerge-command-prefix~ m     | smerge-keep-mine    |
| ~smerge-command-prefix~ o     | smerge-keep-other   |
| ~smerge-command-prefix~ a     | smerge-keep-all     |
| ~smerge-command-prefix~ E     | smerge-ediff        |

*** Local settings

Feel free to add private setting at *~/.emacs.local.el*, the following is an
example.

#+BEGIN_SRC elisp
;; -----------------------------------------------------------------------------
;; startup initial frame
;; -----------------------------------------------------------------------------
(setq initial-frame-alist
  '((tool-bar-lines . 0) (width . 120) (height . 36) (left . 800) (top . 350)))
(setq default-frame-alist
  '((tool-bar-lines . 0) (width . 120) (height . 36) (left . 800) (top . 350)))

;; -----------------------------------------------------------------------------
;; setup database
;; -----------------------------------------------------------------------------
(setq-default
  sql-product "oracle"
  sql-user "username"
  sql-password "xxxxxxxx"
  sql-database "host/sid")

;; -----------------------------------------------------------------------------
;; bar-browse, settup a local git repository
;; -----------------------------------------------------------------------------
(add-to-list 'browse-at-remote-remote-type-domains '("192.168.0.202" . "avic"))

(defun browse-at-remote--format-region-url-as-avic (repo-url location filename &optional linestart lineend)
  "URL formatted for avic."
  (let ((avic-repo-url (replace-regexp-in-string "https://" "http://" repo-url)))
    (cond
      ((and linestart lineend)
        (format "%s/blob/%s/%s#L%d-%d" avic-repo-url location filename linestart lineend))
      (linestart (format "%s/blob/%s/%s#L%d" avic-repo-url location filename linestart))
      (t (format "%s/tree/%s/%s" avic-repo-url location filename)))))

(defun browse-at-remote--format-commit-url-as-avic (repo-url commithash)
  "Commit URL formatted for avic. Currently the same as for github."
  (format "%s/commit/%s" repo-url commithash))
#+END_SRC


# ------------------------------------------------------------------------------
# readme.org ends here
